import {async} from '@angular/core/testing';
import {Diamond} from './diamond';

describe('Diamond Kata:', () => {

  let subject: Diamond;

  beforeEach(async(() => {
    subject = new Diamond();
  }));
  describe('AT: getDiamondFor should create diamond '
    + 'built from all characters in the alphabet up to '
    + 'and including stop letter', () => {

    it('should ge a diamond for C', () => {
      expect(subject
        .getDiamondFor('C')).toEqual(
        [
          '__A__',
          '_B_B_',
          'C___C',
          '_B_B_',
          '__A__'].toString());

    });
    it('should ge a diamond for Z', () => {
      expect(subject
        .getDiamondFor('Z')).toEqual(
        [
          '_________________________A_________________________',
          '________________________B_B________________________',
          '_______________________C___C_______________________',
          '______________________D_____D______________________',
          '_____________________E_______E_____________________',
          '____________________F_________F____________________',
          '___________________G___________G___________________',
          '__________________H_____________H__________________',
          '_________________I_______________I_________________',
          '________________J_________________J________________',
          '_______________K___________________K_______________',
          '______________L_____________________L______________',
          '_____________M_______________________M_____________',
          '____________N_________________________N____________',
          '___________O___________________________O___________',
          '__________P_____________________________P__________',
          '_________Q_______________________________Q_________',
          '________R_________________________________R________',
          '_______S___________________________________S_______',
          '______T_____________________________________T______',
          '_____U_______________________________________U_____',
          '____V_________________________________________V____',
          '___W___________________________________________W___',
          '__X_____________________________________________X__',
          '_Y_______________________________________________Y_',
          'Z_________________________________________________Z',
          '_Y_______________________________________________Y_',
          '__X_____________________________________________X__',
          '___W___________________________________________W___',
          '____V_________________________________________V____',
          '_____U_______________________________________U_____',
          '______T_____________________________________T______',
          '_______S___________________________________S_______',
          '________R_________________________________R________',
          '_________Q_______________________________Q_________',
          '__________P_____________________________P__________',
          '___________O___________________________O___________',
          '____________N_________________________N____________',
          '_____________M_______________________M_____________',
          '______________L_____________________L______________',
          '_______________K___________________K_______________',
          '________________J_________________J________________',
          '_________________I_______________I_________________',
          '__________________H_____________H__________________',
          '___________________G___________G___________________',
          '____________________F_________F____________________',
          '_____________________E_______E_____________________',
          '______________________D_____D______________________',
          '_______________________C___C_______________________',
          '________________________B_B________________________',
          '_________________________A_________________________',
        ].toString());

    });

  });
  describe('UT:', () => {
    it('mirror should return lines mirrored along the horizontal center', function () {
      expect(subject.mirror(['a'])).toEqual(['a']);
      expect(subject.mirror(['a', 'b'])).toEqual(['a', 'b', 'a']);
      expect(subject.mirror(['a', 'b', 'c'])).toEqual(['a', 'b', 'c', 'b', 'a']);
    });

    it('mirrorDetail should mirror a string the vertical center', function () {
      expect(subject.mirrorDetail('a')).toEqual('a');
      expect(subject.mirrorDetail('ab')).toEqual('aba');
      expect(subject.mirrorDetail('abc')).toEqual('abcba');
    });

    it('getLineFragment should build correct fragments', function () {
      expect(subject.getLineFragment('A', 'C')).toEqual('__A');
      expect(subject.getLineFragment('B', 'C')).toEqual('_B_');
      expect(subject.getLineFragment('C', 'C')).toEqual('C__');
      expect(subject.getLineFragment('A', 'D')).toEqual('___A');
      expect(subject.getLineFragment('C', 'D')).toEqual('_C__');
      expect(subject.getLineFragment('Z', 'Z')).toEqual('Z_________________________');

    });

  });

});

